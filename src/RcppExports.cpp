// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_dynseg_cpp
List compute_dynseg_cpp(const List& suff_stats, const String& family, const int& ncol, const int& min_block_size, int max_blocks, const Function& pen_func);
RcppExport SEXP _blockcpd_compute_dynseg_cpp(SEXP suff_statsSEXP, SEXP familySEXP, SEXP ncolSEXP, SEXP min_block_sizeSEXP, SEXP max_blocksSEXP, SEXP pen_funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type suff_stats(suff_statsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int& >::type min_block_size(min_block_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_blocks(max_blocksSEXP);
    Rcpp::traits::input_parameter< const Function& >::type pen_func(pen_funcSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dynseg_cpp(suff_stats, family, ncol, min_block_size, max_blocks, pen_func));
    return rcpp_result_gen;
END_RCPP
}
// compute_hierseg_cpp
List compute_hierseg_cpp(const List& suff_stats, const String& family, const int& ncol, const int& min_block_size, const int& max_blocks, const Function& pen_func, const String& algorithm_type);
RcppExport SEXP _blockcpd_compute_hierseg_cpp(SEXP suff_statsSEXP, SEXP familySEXP, SEXP ncolSEXP, SEXP min_block_sizeSEXP, SEXP max_blocksSEXP, SEXP pen_funcSEXP, SEXP algorithm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type suff_stats(suff_statsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int& >::type min_block_size(min_block_sizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_blocks(max_blocksSEXP);
    Rcpp::traits::input_parameter< const Function& >::type pen_func(pen_funcSEXP);
    Rcpp::traits::input_parameter< const String& >::type algorithm_type(algorithm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hierseg_cpp(suff_stats, family, ncol, min_block_size, max_blocks, pen_func, algorithm_type));
    return rcpp_result_gen;
END_RCPP
}
// compute_suff_stats_cpp
List compute_suff_stats_cpp(const IntegerMatrix& data_mat, const String& family);
RcppExport SEXP _blockcpd_compute_suff_stats_cpp(SEXP data_matSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type data_mat(data_matSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(compute_suff_stats_cpp(data_mat, family));
    return rcpp_result_gen;
END_RCPP
}
// compute_rand
float compute_rand(IntegerVector cp1, IntegerVector cp2, int const& m);
RcppExport SEXP _blockcpd_compute_rand(SEXP cp1SEXP, SEXP cp2SEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rand(cp1, cp2, m));
    return rcpp_result_gen;
END_RCPP
}
// compute_hausdorff
int compute_hausdorff(IntegerVector cp1, IntegerVector cp2);
RcppExport SEXP _blockcpd_compute_hausdorff(SEXP cp1SEXP, SEXP cp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hausdorff(cp1, cp2));
    return rcpp_result_gen;
END_RCPP
}
// compute_symdiff
int compute_symdiff(IntegerVector cp1, IntegerVector cp2);
RcppExport SEXP _blockcpd_compute_symdiff(SEXP cp1SEXP, SEXP cp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_symdiff(cp1, cp2));
    return rcpp_result_gen;
END_RCPP
}
// compute_jaccard
double compute_jaccard(IntegerVector cp1, IntegerVector cp2);
RcppExport SEXP _blockcpd_compute_jaccard(SEXP cp1SEXP, SEXP cp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cp1(cp1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cp2(cp2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_jaccard(cp1, cp2));
    return rcpp_result_gen;
END_RCPP
}
// rcpd_cpp
NumericMatrix rcpd_cpp(String family, int n, int m, IntegerVector changepoints, List parameters);
RcppExport SEXP _blockcpd_rcpd_cpp(SEXP familySEXP, SEXP nSEXP, SEXP mSEXP, SEXP changepointsSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type changepoints(changepointsSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpd_cpp(family, n, m, changepoints, parameters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_blockcpd_compute_dynseg_cpp", (DL_FUNC) &_blockcpd_compute_dynseg_cpp, 6},
    {"_blockcpd_compute_hierseg_cpp", (DL_FUNC) &_blockcpd_compute_hierseg_cpp, 7},
    {"_blockcpd_compute_suff_stats_cpp", (DL_FUNC) &_blockcpd_compute_suff_stats_cpp, 2},
    {"_blockcpd_compute_rand", (DL_FUNC) &_blockcpd_compute_rand, 3},
    {"_blockcpd_compute_hausdorff", (DL_FUNC) &_blockcpd_compute_hausdorff, 2},
    {"_blockcpd_compute_symdiff", (DL_FUNC) &_blockcpd_compute_symdiff, 2},
    {"_blockcpd_compute_jaccard", (DL_FUNC) &_blockcpd_compute_jaccard, 2},
    {"_blockcpd_rcpd_cpp", (DL_FUNC) &_blockcpd_rcpd_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_blockcpd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
